# Anticonf (tm) script by Jeroen Ooms (2020)
# This script will query 'pkg-config' for the required cflags and ldflags.
# If pkg-config is unavailable or does not find the library, try setting
# INCLUDE_DIR and LIB_DIR manually via e.g:
# R CMD INSTALL --configure-vars='INCLUDE_DIR=/.../include LIB_DIR=/.../lib'

# Library settings
PKG_CONFIG_NAME="icu-i18n"
PKG_DEB_NAME="libicu-dev"
PKG_RPM_NAME="libicu-devel"
PKG_TEST_HEADER="<unicode/uvernum.h>"
PKG_TEST_FILE="tools/version.c"
PKG_TEST_CFLAGS=""
PKG_LIBS="-licu"
PKG_CFLAGS=""

# Use pkg-config if available
pkg-config ${PKG_CONFIG_NAME} --atleast-version=0.19 2>/dev/null
if [ $? -eq 0 ]; then
  PKGCONFIG_CFLAGS=`pkg-config --cflags --silence-errors ${PKG_CONFIG_NAME}`
  PKGCONFIG_LIBS=`pkg-config --libs ${PKG_CONFIG_NAME}`
fi

# Check for custom locations
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
  PKG_TEST_CFLAGS=${PKG_CFLAGS}
elif [ "$PKGCONFIG_CFLAGS" ] || [ "$PKGCONFIG_LIBS" ]; then
  echo "Found pkg-config cflags and libs!"
  PKG_CFLAGS=${PKGCONFIG_CFLAGS}
  PKG_LIBS=${PKGCONFIG_LIBS}
  PKG_TEST_CFLAGS=${PKG_CFLAGS}
elif [ `uname` = "Darwin" ]; then
  # Macs come with icucore, but not the headers
  PKG_CFLAGS="-I../inst/include/apple -DU_DISABLE_RENAMING=1"
  PKG_LIBS="-licucore"
  PKG_TEST_CFLAGS="-Iinst/include/apple -DU_DISABLE_RENAMING=1"
fi

# Find compiler
CC=`${R_HOME}/bin/R CMD config CC`
CFLAGS=`${R_HOME}/bin/R CMD config CFLAGS`
CPPFLAGS=`${R_HOME}/bin/R CMD config CPPFLAGS`

# For debugging
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "Using PKG_LIBS=$PKG_LIBS"
echo "Using PKG_TEST_CFLAGS=$PKG_TEST_CFLAGS"

# Test configuration
echo "#include $PKG_TEST_HEADER" | ${CC} ${CPPFLAGS} ${PKG_TEST_CFLAGS} ${CFLAGS} -E -xc - >/dev/null 2>configure.log

# Customize the error
if [ $? -ne 0 ]; then
  echo "----------------------------- ANTICONF -------------------------------"
  echo "Configuration failed to find $PKG_CONFIG_NAME library. Try installing:"
  echo " * deb: $PKG_DEB_NAME (Debian, Ubuntu, etc)"
  echo " * rpm: $PKG_RPM_NAME (Fedora, CentOS, RHEL)"
  echo "If $PKG_CONFIG_NAME is already installed, check that 'pkg-config' is in your"
  echo "PATH and PKG_CONFIG_PATH contains a $PKG_CONFIG_NAME.pc file. If pkg-config"
  echo "is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "-------------------------- [ERROR MESSAGE] ---------------------------"
  cat configure.log
  echo "----------------------------------------------------------------------"
  exit 1
fi

# Write to Makevars
sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" src/Makevars.in > src/Makevars

# Allow for skipping test
if [ "$SKIP_LIBICU_VERSION_TEST" ]; then
  exit 0
fi

# Test version of libicu
${CC} ${CPPFLAGS} ${PKG_TEST_CFLAGS} ${CFLAGS} -E ${PKG_TEST_FILE} >/dev/null 2>&1

# On Ubuntu we enforce using the PPA
if [ $? -ne 0 ]; then
  echo "WARNING: your version of libicu is really old (< icu 55)! Many features might not work!"
fi

# Success
echo "Configuration OK!"
exit 0
